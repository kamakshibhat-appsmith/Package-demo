{
  "unpublishedPage": {
    "name": "Dashboard",
    "slug": "dashboard",
    "layouts": [
      {
        "viewMode": false,
        "dsl": {
          "widgetName": "MainContainer",
          "backgroundColor": "none",
          "rightColumn": 1224,
          "snapColumns": 64,
          "detachFromLayout": true,
          "widgetId": "0",
          "topRow": 0,
          "bottomRow": 1220,
          "containerStyle": "none",
          "snapRows": 95,
          "parentRowSpace": 1,
          "type": "CANVAS_WIDGET",
          "canExtend": true,
          "version": 89,
          "minHeight": 970,
          "parentColumnSpace": 1,
          "dynamicBindingPathList": [],
          "leftColumn": 0
        },
        "layoutOnLoadActions": [
          [
            {
              "id": "Dashboard__$utils1$_utils.productWarehouseChartData",
              "name": "_$utils1$_utils.productWarehouseChartData",
              "collectionId": "Dashboard__$utils1$_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async (sel1 = 1) => {\n  const productLocations = await _$utils1$_getProductWarehouse.run(sel1);\n  return productLocations.map(l => {\n    return {\n      Stock: l.stock,\n      Warehouse: l.label\n    };\n  });\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Dashboard_getProducts",
              "name": "getProducts",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Dashboard_getPurchaseOrders",
              "name": "getPurchaseOrders",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Dashboard_getSuppliers",
              "name": "getSuppliers",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Dashboard_getWarehouses",
              "name": "getWarehouses",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Dashboard__$utils1$_utils.getProducts1",
              "name": "_$utils1$_utils.getProducts1",
              "collectionId": "Dashboard__$utils1$_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async (selectedvalue, user) => {\n  const stockFilter = selectedvalue;\n  const products = await _$utils1$_getProducts.run(user);\n  let filteredProducts = products;\n  if (stockFilter === 'Low stock') {\n    filteredProducts = products.filter(p => p.total_stock && p.total_stock < p.low_stock && p.total_stock !== 0);\n  } else if (stockFilter === 'Out of stock') {\n    filteredProducts = products.filter(p => p.total_stock < 1);\n  }\n  return filteredProducts.map(p => ({\n    Id: p.id,\n    Name: p.name,\n    SalePrice: p.price,\n    CostPrice: p.cost,\n    Sku: p.sku,\n    Category: p.category,\n    LowStock: p.low_stock,\n    Image: p.image,\n    TotalStock: p.total_stock,\n    VariationId: p.product_variant_id,\n    Description: p.description\n  }));\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Dashboard_utils.getPurchaseOrders",
              "name": "utils.getPurchaseOrders",
              "collectionId": "Dashboard_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "SELECT po.*, c.name, c.phone, c.email, l.label, l.address1, COUNT(pop.product_id) as total_product_count\nFROM purchase_order po\nJOIN company c ON po.company_id = c.id\nJOIN location l ON po.location_id = l.id\nLEFT JOIN purchase_order_product pop ON po.id = pop.purchase_order_id\nGROUP BY po.id, po.updated, po.company_id, c.name, c.phone, c.email, l.label, l.address1;\n"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Dashboard_getProductWarehouse",
              "name": "getProductWarehouse",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [
                "sel_product.selectedOptionValue ? sel_product.selectedOptionValue : 147"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Dashboard_utils.dashboardMetrics",
              "name": "utils.dashboardMetrics",
              "collectionId": "Dashboard_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Dashboard__$utils1$_getProducts",
              "name": "_$utils1$_getProducts",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [
                "_$utils1$_utils.stockPageLogic()",
                "this.limit.user.offset",
                "this.params.user.limit"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Dashboard__$utils1$_utils.allProducts",
              "name": "_$utils1$_utils.allProducts",
              "collectionId": "Dashboard__$utils1$_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => _$utils1$_getProducts.data.map(p => ({\n  label: p.name,\n  value: p.id\n}))"
              ],
              "timeoutInMillisecond": 10000
            }
          ]
        ],
        "layoutOnLoadActionErrors": [],
        "validOnPageLoadActions": true,
        "id": "Dashboard",
        "deleted": false,
        "policies": [],
        "userPermissions": []
      }
    ],
    "userPermissions": [],
    "policies": [],
    "isHidden": false
  },
  "deleted": false,
  "gitSyncId": "661f7ff8cd49ad59d72529f1_661f7ff8cd49ad59d72529f8"
}