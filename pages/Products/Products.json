{
  "unpublishedPage": {
    "name": "Products",
    "slug": "products",
    "layouts": [
      {
        "viewMode": false,
        "dsl": {
          "widgetName": "MainContainer",
          "backgroundColor": "none",
          "rightColumn": 1224,
          "snapColumns": 64,
          "detachFromLayout": true,
          "widgetId": "0",
          "topRow": 0,
          "bottomRow": 1010,
          "containerStyle": "none",
          "snapRows": 95,
          "parentRowSpace": 1,
          "type": "CANVAS_WIDGET",
          "canExtend": true,
          "version": 89,
          "minHeight": 970,
          "parentColumnSpace": 1,
          "dynamicBindingPathList": [],
          "leftColumn": 0
        },
        "layoutOnLoadActions": [
          [
            {
              "id": "Products_getProductLocations",
              "name": "getProductLocations",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [
                "this.params.variationId"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Products_getProducts",
              "name": "getProducts",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Products_getPurchaseOrders",
              "name": "getPurchaseOrders",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Products_getSupplier",
              "name": "getSupplier",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [
                "this.params.supplierId"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Products_getSupplierProduct",
              "name": "getSupplierProduct",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [
                "this.params.id"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Products_getSupplierProducts",
              "name": "getSupplierProducts",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [
                "this.params.supplierId"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Products_getSuppliers",
              "name": "getSuppliers",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Products_getWarehouses",
              "name": "getWarehouses",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Products__$utilspackage$_utils.getProducts1",
              "name": "_$utilspackage$_utils.getProducts1",
              "collectionId": "Products__$utilspackage$_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async (selectedvalue, user) => {\n  const stockFilter = selectedvalue;\n  const products = await _$utilspackage$_getProducts.run(user);\n  let filteredProducts = products;\n  if (stockFilter === 'Low stock') {\n    filteredProducts = products.filter(p => p.total_stock && p.total_stock < p.low_stock && p.total_stock !== 0);\n  } else if (stockFilter === 'Out of stock') {\n    filteredProducts = products.filter(p => p.total_stock < 1);\n  }\n  return filteredProducts.map(p => ({\n    Id: p.id,\n    Name: p.name,\n    SalePrice: p.price,\n    CostPrice: p.cost,\n    Sku: p.sku,\n    Category: p.category,\n    LowStock: p.low_stock,\n    Image: p.image,\n    TotalStock: p.total_stock,\n    VariationId: p.product_variant_id,\n    Description: p.description\n  }));\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Products_utils11.getAllWarehouses",
              "name": "utils11.getAllWarehouses",
              "collectionId": "Products_utils11",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => {\n  const warehouseData = await getWarehouses.run();\n  return warehouseData.map(d => {\n    return {\n      Id: d.id,\n      WarehouseName: d.label,\n      Stock: ''\n    };\n  });\n}"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Products_utils11.getSuppliers",
              "name": "utils11.getSuppliers",
              "collectionId": "Products_utils11",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => {\n  const suppliers = await getSuppliers.run();\n  return suppliers.map(s => {\n    return {\n      Id: s.id,\n      Name: s.name,\n      Email: s.email,\n      Phone: s.phone\n    };\n  });\n}"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Products_utils11.getCategories",
              "name": "utils11.getCategories",
              "collectionId": "Products_utils11",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => {\n  const products = await utils11.getProducts();\n  const categories = products.map(p => p.Category);\n  const sanitisedCategories = categories.filter(category => category !== null && category.trim() !== \"\");\n  if (!products || products.length < 1) {\n    return [{\n      id: 1,\n      name: 'Food'\n    }, {\n      id: 2,\n      name: 'Gadget'\n    }];\n  }\n  const uniqueCategoriesRaw = {};\n  for (let i = 0; i < sanitisedCategories.length; i++) {\n    uniqueCategoriesRaw[sanitisedCategories[i]] = true;\n  }\n  const uniqueCategories = Object.keys(uniqueCategoriesRaw);\n  return uniqueCategories.map((category, index) => {\n    return {\n      id: index,\n      name: category\n    };\n  });\n}"
              ],
              "timeoutInMillisecond": 10000
            }
          ]
        ],
        "layoutOnLoadActionErrors": [],
        "validOnPageLoadActions": true,
        "id": "Products",
        "deleted": false,
        "policies": [],
        "userPermissions": []
      }
    ],
    "userPermissions": [],
    "policies": [],
    "isHidden": false
  },
  "deleted": false,
  "gitSyncId": "661f7ff8cd49ad59d72529f1_661f7ff8cd49ad59d7252a02"
}